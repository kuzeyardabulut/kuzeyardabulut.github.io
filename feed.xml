<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://kuzey.rs/</id><title>Cyber Blog</title><subtitle>Cybersecurity related blogposts</subtitle> <updated>2024-05-08T09:54:47+03:00</updated> <author> <name>Kuzey Arda Bulut</name> <uri>https://kuzey.rs/</uri> </author><link rel="self" type="application/atom+xml" href="https://kuzey.rs/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://kuzey.rs/"/> <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator> <rights> © 2024 Kuzey Arda Bulut </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Trying to Enable KCOV on Samsung Galaxy S22</title><link href="https://kuzey.rs/posts/FuzzS22/" rel="alternate" type="text/html" title="Trying to Enable KCOV on Samsung Galaxy S22" /><published>2024-04-08T12:00:00+03:00</published> <updated>2024-04-08T12:00:00+03:00</updated> <id>https://kuzey.rs/posts/FuzzS22/</id> <content src="https://kuzey.rs/posts/FuzzS22/" /> <author> <name>Kuzey Arda Bulut</name> </author> <category term="Fuzzing" /> <category term="Android Kernel" /> <summary> In this article, I will talk about the research I did by spending about 1.5 months on the S22 device. The primary purpose of my research was to fuzz the device by compiling the kernel with KCOV, but unfortunately, I could not succeed as a result of my many attempts. In the rest of our article, I will explain the experiments I made respectively. First I downloaded the firmware of the device fro... </summary> </entry> <entry><title>AWS Certified Security - Specialty (SCS-C01) Exam Experiences</title><link href="https://kuzey.rs/posts/AWS_Speciality/" rel="alternate" type="text/html" title="AWS Certified Security - Specialty (SCS-C01) Exam Experiences" /><published>2023-06-17T00:21:00+03:00</published> <updated>2023-06-17T00:21:00+03:00</updated> <id>https://kuzey.rs/posts/AWS_Speciality/</id> <content src="https://kuzey.rs/posts/AWS_Speciality/" /> <author> <name>Kuzey Arda Bulut</name> </author> <category term="AWS" /> <category term="Cloud Security" /> <summary> I passed the AWS Security Specialty exam about 6 months ago and became the world’s youngest aws expert at the age of 15. Today I would like to tell you about my experience in this difficult process. What is AWS Security Specialty? The AWS Security Specialty exam is one of the most difficult AWS exams dealing with cloud security. In this exam, you are held responsible for 6 different domains. Y... </summary> </entry> <entry><title>DLL Hollowing with Rust Language: Stealth Injection</title><link href="https://kuzey.rs/posts/RustStomping/" rel="alternate" type="text/html" title="DLL Hollowing with Rust Language: Stealth Injection" /><published>2023-06-11T00:21:00+03:00</published> <updated>2023-06-11T00:21:00+03:00</updated> <id>https://kuzey.rs/posts/RustStomping/</id> <content src="https://kuzey.rs/posts/RustStomping/" /> <author> <name>Kuzey Arda Bulut</name> </author> <category term="Malware" /> <category term="Windows Injection" /> <category term="Rust" /> <summary> This will be the first blog on this website. I take DLL Hollowing topic for my first blog because I didn’t see any articles about DLL Hollowing with rust-lang so I decided to talk about that. This project is a bit different than others because we are not creating threads. We are just changing the active module’s permissions and injecting our shellcode to this module without changing headers. Wh... </summary> </entry> <entry><title>The Difficulty of Reverse Engineering Applications Written in Rust</title><link href="https://kuzey.rs/posts/ReverseRust/" rel="alternate" type="text/html" title="The Difficulty of Reverse Engineering Applications Written in Rust" /><published>2023-05-29T00:21:00+03:00</published> <updated>2023-05-29T00:21:00+03:00</updated> <id>https://kuzey.rs/posts/ReverseRust/</id> <content src="https://kuzey.rs/posts/ReverseRust/" /> <author> <name>Kuzey Arda Bulut</name> </author> <category term="Rust" /> <category term="Memory Safety" /> <category term="Reverse Engineering" /> <summary> Reverse engineering is the process of analyzing a software application to understand its inner workings and functionality. It’s usually done for a variety of reasons, such as understanding undocumented systems, detecting vulnerabilities, or creating compatible software. But reverse engineering becomes quite challenging when it comes to applications written in Rust. This article aims to explain ... </summary> </entry> </feed>
